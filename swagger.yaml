swagger: '2.0'
info:
  version: 1.0.0
  title: Taiga
basePath: /api
schemes:
  - http
  - https
consumes:
  - application/json
  - text/xml
produces:
  - application/json
  - text/html
paths:
  /folder/{folderId}:
    get:
      description: Fetch the details and content of a folder by id
      parameters:
        - name: folderId
          in: path
          type: string
          description: Folder ID
          required: true
      responses:
        200:
          description:  Properties of requested folder
          schema:
            title: Folder
            type: object
            properties:
              id: 
                type: string
              name: 
                type: string
              type:
                type: string
                enum:
                  - folder
                  - trash
                  - home
              parents: 
                type: array
                items: 
                  "$ref": "#/definitions/namedid"
              entries:
                type: array
                items: 
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - folder
                        - dataset
                        - datasetVersion
                    id:
                      type: string
                    name:
                      type: string

  /folders/create:
    post:
      description: Create a new folder
      parameters:
        - in: body
          name: metadata
          schema:
            type: object
            properties:
              name:
                type: string
                description: New folder name
              parent:
                type: string
                description: Parent folder ID to initially insert this folder under
      responses:
        200:
          description: The id of the newly created folder
          schema:
            type: object
            properties:
              id: 
                type: string
              name: 
                type: string


  /folders/update:
    post:
      description: Perform multiple updates to folders within a single transaction.  Can be used for moves (a remove and add somewhere else), copies (and add) and deletes (a remove and add to trash)
      parameters:
        - in: body
          name: operations
          schema:
            type: object
            properties:
              operations:
                type: array
                items:
                  type: object
                  properties:
                    parent: 
                      type: string
                    opType:
                      type: string
                      enum: 
                        - add
                        - remove
                    idType:
                      type: string
                      enum:
                        - folder
                        - dataset
                        - datasetVersion
      responses:
        200:
          description: Successful execution of update
        400:
          description: Attempted to do something bad (move trash or home, or modify non-existant entry)

          
  /user:
    get:
      description: Fetch properties about the currently authenticated user
      responses:
        200:
          description: Properties of current user
          schema:
            title: User
            type: object
            properties:
              id: 
                type: string
              name:
                type: string
              home:
                type: string
              trash:
                type: string

  /uploadurl:
    get:
      description: Get url used to upload data
      responses:
        200:
          description: Url and id to use to refer to upload location
          schema:
            title: FileUploadInfo
            type: object
            properties:
              id:
                type: string
              url:
                type: string

  /datasets/create:
    post:
      description: Create a dataset from a set of already uploaded objects
      parameters:
        - in: body
          name: dataset
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              parent:
                type: string
              entries:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    type:
                      type: string
                    description:
                      type: string
                    id:
                      type: string
                      description: The object ID returned from the /uploadurl request
      responses:
        200:
          description: The info about the newly created dataset
          schema:
            "$ref": "#/definitions/ImportStatus"

  /dataset/{datasetId}/activity:
    get:
      description: Fetch activity history for this dataset
      parameters:
        - name: datasetId
          in: path
          type: string
          description: Dataset ID
          required: true
      responses:
        200:
          description: Successfully updated

  /datafile:
    get:
      # do we need to support conversion?
      description: Get datafile contents
      parameters:
        - name: name
          in: query
          type: string
          description: dataset_id or dataset_version_id with optional version number and filename
          required: true
      responses:
        200:
          description: Successfully updated

  /dataset/{datasetId}/name:
    post:
      description: Update dataset name
      parameters:
        - name: datasetId
          in: path
          type: string
          description: Dataset ID
          required: true
      responses:
        200:
          description: Successfully updated

  /dataset/{datasetId}/description:
    post:
      description: Update dataset name
      parameters:
        - name: datasetId
          in: path
          type: string
          description: Dataset ID
          required: true
      responses:
        200:
          description: Successfully updated

  /datasetVersion/{datasetVersionId}:
    get:
      description: Fetch the contents of a version of specific dataset
      parameters:
        - name: datasetVersionId
          in: path
          type: string
          description: Dataset Version ID
          required: true
      responses:
        200:
          description: Status of import, and any error which may have occurred
          schema:
            type: object
            
  /datasetVersion/{datasetVersionId}/status:
    get:
      description: Fetch the status of a dataset being imported
      parameters:
        - name: datasetVersionId
          in: path
          type: string
          description: Dataset Version ID
          required: true
      responses:
        200:
          description: Status of import, and any error which may have occurred
          schema:
            "$ref": "#/definitions/ImportStatus"

definitions:
  ImportStatus:
    type: object
    properties:
      id:
        type: string
      status:
        type: string
        enum:
          - pending
          - running
          - complete
          - failed
      message:
        type: string
  namedid:
    type: object
    properties:
      name:
        type: string
      id:
        type: string
        