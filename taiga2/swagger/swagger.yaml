swagger: "2.0"
info:
  version: 1.0.0
  title: Taiga
#basePath: /api
schemes:
  - http
  - https
consumes:
  - application/json
  - text/xml
produces:
  - application/json
  - text/html
paths:
  /folder/{folder_id}:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_folder
      description: Fetch the details and content of a folder by id
      parameters:
        - name: folder_id
          in: path
          type: string
          description: Folder ID
          required: true
      responses:
        200:
          description: Properties of requested folder
          schema:
            title: Folder
            type: object
            required:
              - id
              - name
              - type
              - parents
              - entries
              - creation_date
              - creator
            properties:
              id:
                type: string
              name:
                type: string
              type:
                type: string
                enum:
                  - Folder
                  - Trash
                  - Home
              parents:
                type: array
                items:
                  "$ref": "#/definitions/NamedId"
              creation_date:
                type: string
              creator:
                "$ref": "#/definitions/NamedId"
              description:
                type: string
              entries:
                type: array
                items:
                  type: object
                  required:
                    - type
                    - id
                    - name
                    - creation_date
                    - creator
                  properties:
                    type:
                      type: string
                      enum:
                        - folder
                        - dataset
                        - dataset_version
                        - virtual_dataset
                    id:
                      type: string
                    # populated for dataset and datasetVersion.  Useful to know what the latest version of a dataset is.
                    dataset_version_id:
                      type: string
                    name:
                      type: string
                    creation_date:
                      type: string
                    creator:
                      "$ref": "#/definitions/NamedId"
              acl:
                "$ref": "#/definitions/Acl"
        404:
          description: No folder found with the id provided

  /folder/create:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: create_folder
      description: Create a new folder
      consumes:
        - application/json
      parameters:
        - in: body
          name: metadata
          schema:
            type: object
            required:
              - name
              - parentId
            properties:
              name:
                type: string
                description: New folder name
              description:
                type: string
                description: Long description
              parentId:
                type: string
                description: Parent folder ID to initially insert this folder under
      responses:
        200:
          description: The id of the newly created folder
          schema:
            title: CreateFolderResponse
            type: object
            required:
              - id
              - name
            properties:
              id:
                type: string
              name:
                type: string

  /folder/{folderId}/name:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: update_folder_name
      description: Update the name of the folder folderId
      consumes:
        - application/json
      parameters:
        - name: folderId
          in: path
          type: string
          description: Folder ID
          required: true
        - name: NameUpdate
          in: body
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
      responses:
        200:
          description: Folder name updated

  /folder/{folderId}/description:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: update_folder_description
      description: Update the description of the folderId
      consumes:
        - application/json
      parameters:
        - in: path
          name: folderId
          type: string
          description: Folder ID
          required: true
        - in: body
          name: DescriptionUpdate
          description: Description content to update in the folder folderId
          required: true
          schema:
            type: object
            required:
              - description
            properties:
              description:
                type: string
      responses:
        200:
          description: Folder description updated

  /user:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_user
      description: Fetch properties about the currently authenticated user
      responses:
        200:
          description: Properties of current user
          schema:
            "$ref": "#/definitions/User"

  /user/all:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_all_users
      description: Fetch properties about the currently authenticated user
      responses:
        200:
          description: Properties of current user
          schema:
            title: Users
            type: array
            items:
              "$ref": "#/definitions/User"

  /credentials_s3:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_s3_credentials
      description: Get temporary credentials to access to S3
      responses:
        200:
          description: Temporary credentials to access to S3
          schema:
            title: Credentials
            type: object
            required:
              - accessKeyId
              - expiration
              - secretAccessKey
              - sessionToken
              - bucket
              - prefix
            properties:
              accessKeyId:
                type: string
              expiration:
                type: string
              secretAccessKey:
                type: string
              sessionToken:
                type: string
              bucket:
                type: string
              prefix:
                type: string

  /upload_session:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: create_new_upload_session
      description: Ask for the creation of a new Upload Session to post new files in a dataset

      responses:
        200:
          description: The unique Upload Session Id
          schema:
            title: UploadSessionId
            required:
              - sid
            properties:
              sid:
                type: string

  /dataset:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: create_dataset
      description: Create a dataset from a set of already uploaded objects
      consumes:
        - application/json
      parameters:
        - in: body
          name: sessionDatasetInfo
          required: true
          schema:
            type: object
            required:
              - sessionId
              - datasetName
              - currentFolderId
            properties:
              sessionId:
                type: string
              datasetName:
                type: string
              currentFolderId:
                type: string
      responses:
        200:
          description: The info about the newly created dataset
          schema:
            title: DatasetId
            type: string

  /datasets:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_datasets
      description: Fetch the details of a group of datasets
      consumes:
        - application/json
      parameters:
        - in: body
          name: datasetIdsDict
          schema:
            type: object
            required:
              - datasetIds
            properties:
              datasetIds:
                type: array
                items:
                  type: string
      responses:
        200:
          description: The datasets objects with datasetVersions
          schema:
            title: DatasetsFull
            type: array
            items:
              "$ref": "#/definitions/Dataset"

  /dataset/{datasetId}:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_dataset
      description: Fetch the details of a dataset
      parameters:
        - name: datasetId
          in: path
          type: string
          description: Dataset ID or a permaname
          required: true
      responses:
        200:
          description: The data specific to a specific dataset
          schema:
            "$ref": "#/definitions/Dataset"

  /dataset/{datasetId}/{datasetVersionId}:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_dataset_version_from_dataset
      description: Fetch the details of a dataset version
      parameters:
        - name: datasetId
          in: path
          type: string
          description: Dataset Id
          required: true
        - name: datasetVersionId
          in: path
          type: string
          description: Dataset Version Id
          required: true
      responses:
        200:
          description: The data specific to a specific dataset
          schema:
            title: Dataset
            type: object
            required:
              - dataset
              - datasetVersion
            properties:
              dataset:
                "$ref": "#/definitions/Dataset"
              datasetVersion:
                "$ref": "#/definitions/DatasetVersion"

  /dataset/{dataset_id}/last:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_dataset_last
      description: Fetch the last (dataset_)version of a dataset
      parameters:
        - name: dataset_id
          in: path
          type: string
          description: Dataset ID
          required: true
      responses:
        200:
          description: The data specific to a specific dataset version
          schema:
            "$ref": "#/definitions/DatasetVersion"

  /dataset/{datasetId}/name:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: update_dataset_name
      description: Update dataset name
      consumes:
        - application/json
      parameters:
        - name: datasetId
          in: path
          type: string
          description: Dataset ID
          required: true
        - in: body
          name: NameUpdate
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
      responses:
        200:
          description: Successfully updated

  /dataset/{datasetId}/description:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: update_dataset_description
      description: Update latest dataset version description
      consumes:
        - application/json
      parameters:
        - name: datasetId
          in: path
          type: string
          description: Dataset ID
          required: true
        - in: body
          name: DescriptionUpdate
          schema:
            type: object
            required:
              - description
            properties:
              description:
                type: string
      responses:
        200:
          description: Successfully updated

  /dataset/logAccess:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_datasets_access_logs
      description: Fetch the user's access logs for the datasets
      responses:
        200:
          description: An array of AccessLogs
          schema:
            title: AccessLogs
            type: array
            items:
              title: AccessLog
              type: object
              required:
                - user_id
                - dataset
                - last_access
              properties:
                user_id:
                  type: string
                dataset:
                  "$ref": "#/definitions/NamedId"
                last_access:
                  type: string

  /dataset/{datasetId}/logAccess:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: create_or_update_dataset_access_log
      description: Create or update the access of a dataset by a specific user
      consumes:
        - application/json
      parameters:
        - name: datasetId
          in: path
          type: string
          description: Dataset ID
          required: true
      responses:
        200:
          description: Successfully created or updated

  /dataset/{datasetId}/activityLog:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_activity_log_for_dataset_id
      description: TODO
      consumes:
        - application/json
      parameters:
        - name: datasetId
          in: path
          type: string
          description: Dataset ID
          required: true
      responses:
        200:
          description: Successfully created or updated
          schema:
            type: array
            items:
              type: object
              required:
                - id
                - timestamp
                - user_name
                - type
              properties:
                id:
                  type: string
                timestamp:
                  type: string
                user_name:
                  type: string
                type:
                  type: string
                dataset_name:
                  type:
                    - string
                    - "null"
                dataset_description:
                  type:
                    - string
                    - "null"
                dataset_version:
                  type:
                    - integer
                    - "null"

  /datasetVersion/{datasetVersion_id}:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_dataset_version
      description: Fetch the contents of a version of specific dataset
      parameters:
        - name: datasetVersion_id
          in: path
          type: string
          description: Dataset Version ID
          required: true
      responses:
        200:
          description: The data specific to a specific dataset version
          schema:
            "$ref": "#/definitions/DatasetVersion"

  /datasetVersion:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: create_new_dataset_version
      description: Create a new datasetVersion for the dataset id, with the previous selected datafiles ids
      consumes:
        - application/json
      parameters:
        - name: datasetVersionMetadata
          in: body
          schema:
            type: object
            required:
              - sessionId
              - datasetId
              - newDescription
            properties:
              sessionId:
                type: string
              datasetId:
                type: string
              newDescription:
                type: string
              changesDescription:
                type: string
      responses:
        200:
          description: The info about the newly created dataset version
          schema:
            title: DatasetVersionId
            type: string

  /datasetVersions:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_dataset_versions
      description: Fetch the details of a group of datasetVersions
      consumes:
        - application/json
      parameters:
        - in: body
          name: datasetVersionIdsDict
          schema:
            type: object
            required:
              - datasetVersionIds
            properties:
              datasetVersionIds:
                type: array
                items:
                  type: string
      responses:
        200:
          description: The datasets objects with datasetVersions
          schema:
            title: DatasetsFull
            type: array
            items:
              "$ref": "#/definitions/DatasetVersion"

  /datasetVersion/{datasetVersionId}/description:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: update_dataset_version_description
      description: Update dataset version description
      consumes:
        - application/json
      parameters:
        - name: datasetVersionId
          in: path
          type: string
          description: Dataset Version ID
          required: true
        - in: body
          name: DescriptionUpdate
          schema:
            type: object
            required:
              - description
            properties:
              description:
                type: string
      responses:
        200:
          description: Successfully updated

  /datasetVersion/{datasetVersionId}/deprecate:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: deprecate_dataset_version
      description: Deprecate a dataset version
      consumes:
        - application/json
      parameters:
        - name: datasetVersionId
          in: path
          type: string
          description: Dataset Version ID
          required: true
        - in: body
          name: deprecationReasonObj
          schema:
            type: object
            required:
              - deprecationReason
            properties:
              deprecationReason:
                type: string

      responses:
        200:
          description: Successfully deprecated

  /datasetVersion/{datasetVersionId}/de-deprecate:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: de_deprecate_dataset_version
      description: De-deprecate a dataset version (making it approved)
      consumes:
        - application/json
      parameters:
        - name: datasetVersionId
          in: path
          type: string
          description: Dataset Version ID
          required: true
      responses:
        200:
          description: Successfully de-deprecated

  /datasetVersion/{datasetVersionId}/delete:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: delete_dataset_version
      description: Delete a dataset version so the datafiles can't be accessed anymore
      consumes:
        - application/json
      parameters:
        - name: datasetVersionId
          in: path
          type: string
          description: Dataset Version ID
          required: true
      responses:
        200:
          description: Successfully de-deprecated

  /datafile/{sid}:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: create_upload_session_file
      description: Process a freshly S3 uploaded file (conversion and storage reference)
      consumes:
        - application/json
      parameters:
        - name: sid
          in: path
          type: string
          description: The Upload Session id
          required: true
        - in: body
          name: uploadMetadata
          required: true
          schema:
            "$ref": "#/definitions/UploadSessionFile"
      responses:
        200:
          description: Received data, they are correct and conversion currently doing
          schema:
            title: TaskId
            type: string

  /datafile:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_datafile
      description: Get datafile contents
      parameters:
        - name: dataset_permaname
          in: query
          type: string
          description: "The permaname of the dataset (Either permaname or dataset_version_id must be supplied)"
        - name: version
          in: query
          type: string
          description: "The version number of the dataset (only valid when permaname is supplied)"
        - name: dataset_version_id
          in: query
          type: string
          description: "dataset version id to look up.  (Either permaname or dataset_version_id must be supplied)"
        - name: datafile_name
          in: query
          type: string
          description: "datafile name (optional if there is only one datafile associated with the dataset)"
        - name: format
          in: query
          type: string
          description: the format to retreive as
        - name: force
          in: query
          type: string
          description: "if set to 'Y' will kick off this conversion even if on already has been done/started"
      responses:
        200:
          description: Will kick off conversion if not data in that form is not already availible.  Once reformated data is available, the location(s) will be returned in urls.  Multiple urls are returned because the data may need to be stored in seperate chunks, depending on format.
          schema:
            title: Datafileurl
            type: object
            required:
              - dataset_name
              - dataset_version
              - dataset_id
              - dataset_version_id
              - datafile_name
              - status
            properties:
              dataset_permaname:
                type: string
              dataset_name:
                type: string
              dataset_version:
                type: string
              dataset_id:
                type: string
              dataset_version_id:
                type: string
              datafile_name:
                type: string
              datafile_type:
                type: string
              datafile_format:
                type: string
              datafile_encoding:
                type:
                  - string
                  - "null"
              urls:
                type: array
                items:
                  type: string
              status:
                type: string
              underlying_file_id:
                type:
                  - string
                  - "null"
        202:
          description: Backfilling compressed data
          schema:
            title: task_id
            type: string
        400:
          description: Malformed request
        500:
          description: Error encountered during conversion.

  /datafile/short_summary:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_datafile_short_summary
      description: Get datafile short summary
      parameters:
        - name: dataset_permaname
          in: query
          type: string
          description: "The permaname of the dataset (Either permaname or dataset_version_id must be supplied)"
        - name: version
          in: query
          type: string
          description: "The version number of the dataset (only valid when permaname is supplied)"
        - name: dataset_version_id
          in: query
          type: string
          description: "dataset version id to look up.  (Either permaname or dataset_version_id must be supplied)"
        - name: datafile_name
          in: query
          type: string
          description: "datafile name (optional if there is only one datafile associated with the dataset)"
      responses:
        200:
          description: Will return the short summary computed when the datafile was created
          schema:
            title: short_summary
            type: string
        400:
          description: Malformed request
        500:
          description: Error encountered during datafile retrieval.

  /datafile/column_types:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_datafile_column_types
      description: Get datafile column types
      parameters:
        - name: dataset_permaname
          in: query
          type: string
          description: "The permaname of the dataset (Either permaname or dataset_version_id must be supplied)"
        - name: version
          in: query
          type: string
          description: "The version number of the dataset (only valid when permaname is supplied)"
        - name: dataset_version_id
          in: query
          type: string
          description: "dataset version id to look up.  (Either permaname or dataset_version_id must be supplied)"
        - name: datafile_name
          in: query
          type: string
          description: "datafile name (optional if there is only one datafile associated with the dataset)"
      responses:
        200:
          description: Will return the short summary computed when the datafile was created
          schema:
            title: column_types
            type: object
            additionalProperties:
              type: string
        400:
          description: Malformed request
        404:
          description: No dataset found
        500:
          description: Error encountered during datafile retrieval.

  /datafile/backfill_compressed_file/{datafileId}:
    post:
      description: Backfill compressed S3 file for existing S3DataFile
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: backfill_compressed_file
      consumes:
        - application/json
      parameters:
        - name: datafileId
          in: path
          type: string
          description: ID of DataFile to backfill
          required: true
      responses:
        202:
          description: Started task to backfill compressed file
          schema:
            title: task_id
            type: string
        304:
          description: Datafile already has compressed_s3_key or is not s3 file
        403:
          description: Feature not accessible to non-admin users

  /task_status/{taskStatusId}:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: task_status
      description: Get the status of a Celery task
      parameters:
        - name: taskStatusId
          in: path
          type: string
          description: Celery task status id
          required: true
      responses:
        200:
          description: Status of the task
          schema:
            title: CeleryTaskStatus
            type: object
            required:
              - id
              - state
              - message
              - current
              - total
              - s3Key
            properties:
              id:
                type: string
              state:
                type: string
              message:
                type: string
              current:
                type: number
              total:
                type: number
              s3Key:
                type: string

  /entry/logAccess:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_entries_access_logs
      description: Fetch the user's access logs for the entries
      responses:
        200:
          description: An array of AccessLogs
          schema:
            title: AccessLogs
            type: array
            items:
              title: AccessLog
              type: object
              required:
                - user_id
                - entry
                - last_access
              properties:
                user_id:
                  type: string
                entry:
                  "$ref": "#/definitions/EntrySummary"
                last_access:
                  type: string

  /entry/{entryId}/logAccess:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_entry_access_logs
      description: Fetch the access logs for a specific entry
      parameters:
        - name: entryId
          in: path
          type: string
          description: Entry id for which we would want the AccessLogs
          required: true
      responses:
        200:
          description: An array of AccessLogs
          schema:
            title: AccessLogs
            type: array
            items:
              title: AccessLog
              type: object
              required:
                - user_id
                - user_name
                - entry
                - last_access
              properties:
                user_id:
                  type: string
                user_name:
                  type: string
                entry:
                  "$ref": "#/definitions/EntrySummary"
                last_access:
                  type: string
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: create_or_update_entry_access_log
      description: Create or update the access of an entry by a specific user
      consumes:
        - application/json
      parameters:
        - name: entryId
          in: path
          type: string
          description: Entry ID
          required: true
      responses:
        200:
          description: Successfully created or updated

  /entry/logAccess/remove/all:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: accessLogs_remove
      description: Remove all the couple entry/user of the accessLog given in parameter
      consumes:
        - application/json
      parameters:
        - name: accessLogsToRemove
          in: body
          schema:
            type: array
            items:
              title: AccessLog
              type: object
              required:
                - user_id
                - entry_id
              properties:
                user_id:
                  type: string
                entry_id:
                  type: string
      responses:
        200:
          description: Successfully removed

  /move:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: move_to_folder
      description: Move the entries passed as parameter from the current folder (id) into the requested folder (id). If no targetFolderId passed, it will be moved to the trash folder of the user
      consumes:
        - application/json
      parameters:
        - name: moveMetadata
          in: body
          schema:
            type: object
            required:
              - entryIds
              - currentFolderId
            properties:
              entryIds:
                type: array
                items:
                  title: entryId
                  type: string
              currentFolderId:
                type: string
              targetFolderId:
                type: string
          required: true
          description: "Ids of the entries to move to the folder (id)"
      responses:
        200:
          description: Successfully updated
        422:
          description: Folder Id does not exist

  /copy:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: copy_to_folder
      description: Copy the entries passed as parameter into the requested folder (id)
      consumes:
        - application/json
      parameters:
        - name: copyMetadata
          in: body
          schema:
            type: object
            required:
              - entryIds
              - folderId
            properties:
              entryIds:
                type: array
                items:
                  title: entryId
                  type: string
              folderId:
                type: string
          required: true
          description: "Ids of the entries to move to the folder (id)"
      responses:
        200:
          description: Successfully updated
        422:
          description: Folder Id does not exist

  /provenance/{gid}:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_provenance_graph
      description: Get the provenance graph given its ID
      parameters:
        - name: gid
          in: path
          type: string
          description: Graph Id
          required: true
      responses:
        200:
          description: Provenance Graph
          schema:
            title: ProvenanceGraph
            type: object
            required:
              - graph_id
              - name
              - permaname
              - nodes
            properties:
              graph_id:
                type: string
              name:
                type: string
              permaname:
                type: string
              nodes:
                type: array
                items:
                  type: object
                  required:
                    - node_id
                    - to_edges
                    - from_edges
                    - label
                    - type
                  properties:
                    node_id:
                      type: string
                    from_edges:
                      type: array
                      items:
                        "$ref": "#/definitions/ProvenanceEdge"
                    to_edges:
                      type: array
                      items:
                        "$ref": "#/definitions/ProvenanceEdge"
                    label:
                      type: string
                    type:
                      type: string

  /provenance/import:
    post:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: import_provenance
      description: Import a json provenance into Taiga 2
      consumes:
        - application/json
      parameters:
        - name: provenanceData
          in: body
          schema:
            type: object
            required:
              - name
              - graph
            properties:
              name:
                type: string
              graph:
                type: object
                required:
                  - nodes
                  - edges
                properties:
                  nodes:
                    type: array
                    items:
                      type: object
                      required:
                        - label
                        - type
                      properties:
                        label:
                          type: string
                        type:
                          type: string
                        id:
                          type: string
                        datafile_id:
                          type: string
                  edges:
                    type: array
                    items:
                      type: object
                      required:
                        - from_id
                        - to_id
                      properties:
                        from_id:
                          type: string
                        to_id:
                          type: string
          required: true
          description: "Graph (name, [nodes], [edges])"
      responses:
        200:
          description: Successfully imported

  /search/{current_folder_id}/{search_query}:
    get:
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: search_within_folder
      description: With current folder id and a search query, will return a list of SearchResult that contains datasets and folders
      parameters:
        - name: current_folder_id
          in: path
          type: string
          description: Folder ID we want to perform the search into/from
          required: true
        - name: search_query
          in: path
          type: string
          description: Search query we are looking for in the name of a dataset or folder
          required: true
      responses:
        200:
          description: A SearchResult that contains Entries and breadcrumb
          schema:
            "$ref": "#/definitions/SearchResult"

  /datasetVersion/id/find:
    get:
      description: Return the dataset_version id of the entry_identifier passed in parameter (no folder)
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_dataset_version_id_by_user_entry
      consumes:
        - application/json
      parameters:
        - name: entry_submitted_by_user
          in: query
          type: string
          description: Dataset (id or permaname, with or without version '.' or '/') or dataset_version id
          required: true
      responses:
        200:
          description: A dataset version id
        404:
          description: No dataset version id exists for this entry

  /group/allJoined:
    get:
      description: Return all groups that the currently authenticated user has joined
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_all_groups_for_current_user
      consumes:
        - application/json
      responses:
        200:
          description: A list of groups
          schema:
            type: array
            items:
              "$ref": "#/definitions/Group"

  /group/{groupId}:
    get:
      description: Return group with groupId
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_group
      consumes:
        - application/json
      parameters:
        - name: groupId
          in: path
          type: string
          description: group ID
          required: true
      responses:
        200:
          description: A group
          schema:
            "$ref": "#/definitions/Group"
        403:
          description: Group not accessible to user
        404:
          description: No group with id groupId

  /group/{groupId}/add:
    post:
      description: Add users with userIds to group with id groupId
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: add_group_user_associations
      consumes:
        - application/json
      parameters:
        - name: groupId
          in: path
          type: string
          description: group ID
          required: true
        - name: groupUserAssociationMetadata
          in: body
          schema:
            type: object
            required:
              - userIds
            properties:
              userIds:
                type: array
                items:
                  title: userId
                  type: string
          required: true
          description: "Ids of the users to add to group"
      responses:
        200:
          description: Group with id groupId
          schema:
            "$ref": "#/definitions/Group"
        403:
          description: Group not accessible to current user
        404:
          description: No group with id groupId

  /group/{groupId}/remove:
    post:
      description: Remove users with userIds from group with id groupId
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: remove_group_user_associations
      consumes:
        - application/json
      parameters:
        - name: groupId
          in: path
          type: string
          description: group ID
          required: true
        - name: groupUserAssociationMetadata
          in: body
          schema:
            type: object
            required:
              - userIds
            properties:
              userIds:
                type: array
                items:
                  title: userId
                  type: string
          required: true
          description: "Ids of the users to remove to group"
      responses:
        200:
          description: Group with id groupId
          schema:
            "$ref": "#/definitions/Group"
        403:
          description: Group not accessible to current user
        404:
          description: No group with id groupId

  /figshare/auth_url:
    get:
      description: Get the endpoint to authorize the Figshare Taiga app
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_figshare_auth_url
      responses:
        200:
          description: The Figshare endpoint
          schema:
            type: object
            required:
              - figshare_auth_url
            properties:
              figshare_auth_url:
                type: string

  /figshare:
    put:
      description: After receiving Figshare authorization code, request and save token
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: add_figshare_token
      consumes:
        - application/json
      parameters:
        - name: figshareOAuthRequest
          in: body
          required: true
          schema:
            type: object
            required:
              - code
              - state
            properties:
              code:
                type: string
              state:
                type: string
      responses:
        200:
          description: An existing authorization was updated
        201:
          description: A new authorization was created
        400:
          description: Figshare API request failed

  /figshare/link:
    post:
      description: Upload dataset version and files to Figshare
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: upload_dataset_version_to_figshare
      consumes:
        - application/json
      parameters:
        - name: figshareDatasetVersionLink
          in: body
          required: true
          schema:
            type: object
            required:
              - dataset_version_id
              - article_name
              - files_to_upload
            properties:
              dataset_version_id:
                type: string
              article_name:
                type: string
              article_description:
                type: string
              files_to_upload:
                type: array
                items:
                  type: object
                  required:
                    - datafile_id
                    - file_name
                  properties:
                    datafile_id:
                      type: string
                    file_name:
                      type: string
      responses:
        200:
          description: An existing authorization was updated
          schema:
            type: object
            required:
              - article_id
              - files
            properties:
              article_id:
                type: integer
              files:
                type: array
                items:
                  type: object
                  required:
                    - datafile_id
                    - file_name
                  properties:
                    datafile_id:
                      type: string
                    file_name:
                      type: string
                    task_id:
                      type: string
                    failure_reason:
                      type: string
        401:
          description: TODO (token does not work)

  /figshare/article/{datasetVersionId}:
    get:
      description: Return public url for figshare article associated with dataset version
      x-swagger-router-controller: taiga2.controllers.endpoint
      operationId: get_figshare_public_url
      consumes:
        - application/json
      parameters:
        - name: datasetVersionId
          in: path
          type: string
          description: dataset version ID
          required: true
      responses:
        200:
          description: Fig
          schema:
            type: object
            required:
              - figshare_public_url
            properties:
              figshare_public_url:
                type: string
        404:
          description: No public article found

definitions:
  User:
    title: User
    type: object
    required:
      - id
      - name
      - home_folder_id
      - trash_folder_id
      - token
      - figshare_linked
    properties:
      id:
        type: string
      name:
        type: string
      home_folder_id:
        type: string
      trash_folder_id:
        type: string
      token:
        type: string
      figshare_linked:
        type: boolean

  DatasetVersionSummary:
    title: DatasetVersionSummary
    type: object
    required:
      - name
      - id
      - state
    properties:
      name:
        type: string
      id:
        type: string
      state:
        "$ref": "#/definitions/StatusEnum"

  Dataset:
    title: Dataset
    type: object
    required:
      - id
      - name
      - description
      - permanames
      - versions
    properties:
      id:
        type: string
      name:
        type: string
      permanames:
        type: array
        items:
          type: string
      description:
        type: string
      versions:
        type: array
        items:
          "$ref": "#/definitions/DatasetVersionSummary"
      acl:
        "$ref": "#/definitions/Acl"

  DatasetVersion:
    type: object
    required:
      - description
      - id
      - dataset_id
      - name
      - creation_date
      - creator
      - datafiles
      - version
      - folders
    properties:
      id:
        type: string
      folders:
        type: array
        items:
          "$ref": "#/definitions/NamedId"
      dataset_id:
        type: string
      name:
        type: string
      version:
        type: string
      description:
        type: string
      changes_description:
        type:
          - string
          - "null"
      creation_date:
        type: string
      creator:
        "$ref": "#/definitions/NamedId"
      datafiles:
        type: array
        items:
          "$ref": "#/definitions/Provenance"
      provenance:
        "$ref": "#/definitions/Provenance"
      state:
        "$ref": "#/definitions/StatusEnum"
      reason_state:
        type: string
      figshare_linked:
        type: boolean

  DataFile:
    title: DataFile
    type: object
    required:
      - id
      - name
      - allowed_conversion_type
      - short_summary
      - type
    properties:
      underlying_file_id:
        description: "if this is a virtual dataset, this is the reference to the underlying file, and name is just an alias to that"
        type:
          - string
          - "null"
      id:
        type: string
      name:
        type: string
      allowed_conversion_type:
        type: array
        items:
          type: string
      short_summary:
        description: "A textual description of the size.  (ie: '200 x 30 table')  Should be relatively short and summarize the shape/size of the contents."
        type:
          - string
          - "null"
      original_file_sha256:
        description: the sha256 of the uploaded file
        type:
          - string
          - "null"
      gcs_path:
        description: GCS path of the datafile or file's underlying datafile
        type:
          - string
          - "null"
      type:
        type: string
      figshare_linked:
        type: boolean

  ProvenanceEdge:
    type: object
    required:
      - edge_id
      - from_node_id
      - to_node_id
    properties:
      edge_id:
        type: string
      from_node_id:
        type: string
      to_node_id:
        type: string

  Provenance:
    type: object
    properties:
      method:
        type: object
        properties:
          description:
            type: string
          parameters:
            type: object
      inputs:
        type: array
        items:
          type: object
          required:
            - dataset_version_id
            - name
          properties:
            method_parameter:
              type: string
              description: An optional parameter for specifying which parameter this was used as for the given method.
            dataset_version_id:
              type: string
            name:
              type: string
              description: The name of the datafile within the dataset_version

  DataFileSubmission:
    type: object
    required:
      - name
      - id
    properties:
      name:
        type: string
      mime_type:
        type: string
      description:
        type: string
      id:
        type: string
        description: The object ID returned from the /uploadurl request

  ImportStatus:
    type: object
    required:
      - dataset_version_id
      - status
      - message
    properties:
      dataset_version_id:
        type: string
        description: The id of the datasetVersion that is being created.  Additionally, this id can be used in polling when a dataset import is not yet complete.
      status:
        description: 'One of "pending", "running", "completed" or "failed".  If completed, there will exist a new datasetVersion with id specified in this response.  Failures should have the reason included in the status message.'
        type: string
        enum:
          - pending
          - running
          - complete
          - failed
      message:
        description: Human readable summary of the progress of the import
        type: string

  Acl:
    type: object
    properties:
      default_permissions:
        type: string
        enum:
          - none
          - read
          - read-write
          - owner
      grants:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
              enum:
                - group
                - user
            id:
              type: string
              description: The id of either the group or the user depending on the value of type
            name:
              type: string
            permission:
              type: string
              enum:
                - read
                - read-write
                - owner

  NamedId:
    type: object
    properties:
      name:
        type: string
      id:
        type: string

  OrderedNamedId:
    type: object
    properties:
      name:
        type: string
      id:
        type: string
      order:
        type: integer

  EntrySummary:
    type: object
    properties:
      name:
        type: string
      id:
        type: string
      type:
        type: string

  StatusEnum:
    type: string
    enum:
      - deprecated # Discourage use.  Warn when fetching
      - deleted # Underlying data has been deleted
      - approved

  UploadSessionFile:
    type: object
    required:
      - filetype
      - filename
    properties:
      filename:
        type: string
      filetype:
        type: string
      existingTaigaId:
        type: string
      s3Upload:
        "$ref": "#/definitions/S3UploadedFileMetadata"

  # Match the S3 Data object returned by ManagedUpload
  # https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3/ManagedUpload.html#constructor-property
  S3UploadedFileMetadata:
    type: object
    required:
      - bucket
      - key
      - format
    properties:
      format:
        type: string
      bucket:
        type: string
      key:
        type: string
      encoding:
        type: string

  SearchResult:
    type: object
    required:
      - current_folder
      - name
      - entries
    properties:
      current_folder:
        "$ref": "#/definitions/NamedId"
      name:
        type: string
      entries:
        type: array
        items:
          "$ref": "#/definitions/SearchEntry"

  SearchEntry:
    type: object
    required:
      - breadcrumbs
      - entry
    properties:
      breadcrumbs:
        type: array
        items:
          "$ref": "#/definitions/OrderedNamedId"
      entry:
        type: object
        items:
          "$ref": "#/definitions/Entry"

  Entry:
    type: object
    required:
      - type
      - id
      - name
      - creation_date
      - creator
    properties:
      type:
        type: string
      id:
        type: string
      name:
        type: string
      creation_date:
        type: string
      creator:
        "$ref": "#/definitions/NamedId"

  Group:
    type: object
    required:
      - id
      - name
      - num_users
    properties:
      id:
        type: integer
      name:
        type: string
      num_users:
        type: integer
      users:
        type: array
        items:
          "$ref": "#/definitions/NamedId"
