"""add-activity-log

Revision ID: 6d8d4536fb51
Revises: 944a0b71b403
Create Date: 2019-07-17 16:35:31.967083

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "6d8d4536fb51"
down_revision = "944a0b71b403"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("virtual_dataset_entries")
    op.drop_table("virtual_dataset_versions")
    op.drop_table("virtual_datasets")
    op.add_column(
        "activities", sa.Column("dataset_description", sa.Text(), nullable=True)
    )
    op.add_column("activities", sa.Column("dataset_name", sa.Text(), nullable=True))
    op.add_column(
        "activities", sa.Column("dataset_version", sa.Integer(), nullable=True)
    )
    op.add_column("activities", sa.Column("timestamp", sa.DateTime(), nullable=True))
    op.alter_column(
        "datafiles",
        "type",
        existing_type=postgresql.ENUM("s3", "virtual", name="datafiletype2"),
        nullable=True,
    )
    # ### end Alembic commands ###
    op.execute("alter type activitytype rename to _activitytype")
    op.execute(
        "create type activitytype as enum ('created', 'changed_name', 'changed_description', 'added_version', 'started_log')"
    )
    op.execute("alter table activities drop column type")
    op.execute("alter table activities add column type activitytype not null")
    op.execute(
        "update users set name = 'admin', email = 'no-reply@broadinstitute.org' where email = 'admin@broadinstitute.org'"
    )
    op.execute(
        """
        INSERT into activities (id, user_id, dataset_id, type, dataset_name, dataset_description)
        SELECT uuid_in(md5(random()::text || clock_timestamp()::text)::cstring), u.id, d.id, 'started_log', e.name, e.description
        FROM datasets d
        JOIN entries e ON e.id = d.id,
        users u
        WHERE u.name = 'admin'
    """
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "datafiles",
        "type",
        existing_type=postgresql.ENUM("s3", "virtual", name="datafiletype2"),
        nullable=False,
    )
    op.drop_column("activities", "timestamp")
    op.drop_column("activities", "dataset_version")
    op.drop_column("activities", "dataset_name")
    op.drop_column("activities", "dataset_description")
    op.create_table(
        "virtual_dataset_versions",
        sa.Column("id", sa.VARCHAR(length=80), autoincrement=False, nullable=False),
        sa.Column(
            "virtual_dataset_id",
            sa.VARCHAR(length=80),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("version", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "state",
            postgresql.ENUM(
                "approved", "deprecated", "deleted", name="v_datasetversionstate"
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("reason_state", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["id"], ["entries.id"], name="fk_virtual_dataset_versions_id_entries"
        ),
        sa.ForeignKeyConstraint(
            ["virtual_dataset_id"],
            ["virtual_datasets.id"],
            name="fk_virtual_dataset_versions_virtual_dataset_id_virtual_datasets",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_virtual_dataset_versions"),
        sa.UniqueConstraint(
            "virtual_dataset_id",
            "version",
            name="uq_virtual_dataset_versions_virtual_dataset_id",
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "virtual_datasets",
        sa.Column("id", sa.VARCHAR(length=80), autoincrement=False, nullable=False),
        sa.Column("permaname", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["id"], ["entries.id"], name="fk_virtual_datasets_id_entries"
        ),
        sa.PrimaryKeyConstraint("id", name="pk_virtual_datasets"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "virtual_dataset_entries",
        sa.Column("id", sa.VARCHAR(length=80), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=80), autoincrement=False, nullable=False),
        sa.Column(
            "virtual_dataset_version_id",
            sa.VARCHAR(length=80),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "data_file_id", sa.VARCHAR(length=80), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["data_file_id"],
            ["datafiles.id"],
            name="fk_virtual_dataset_entries_data_file_id_datafiles",
        ),
        sa.ForeignKeyConstraint(
            ["virtual_dataset_version_id"],
            ["virtual_dataset_versions.id"],
            name="fk_virtual_dataset_entries_virtual_dataset_version_id_virtual_d",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_virtual_dataset_entries"),
        sa.UniqueConstraint(
            "virtual_dataset_version_id",
            "name",
            name="uq_virtual_dataset_entries_virtual_dataset_version_id",
        ),
    )
    # ### end Alembic commands ###
